📢 Docker Masterclass for Java Spring Boot Developers
⚓ https://www.udemy.com/course/docker-java/learn/lecture/32740996#overview
...
⚓ https://github.com/vinsguru/docker-spring-webflux
⚓ https://vins-udemy.s3.amazonaws.com/docker-webflux/docker-commands.pdf
⚓ https://vins-udemy.s3.amazonaws.com/docker-webflux/linux-cheat-sheet.pdf
=======================================================================================================================================

🚀 Cloud Native Course Series!
✅ Docker
-> Kubernetes
-> Helm
-> Service Mesh
-> Crossplane


📝 S01: Introduction
📝 S02: Need for Docker
📝 S03: Docker Crash Course
📝 S04: Docker Compose
📝 S05: Dockerizing Spring Application
📝 S06: Integration Testing with TestContainers
📝 S07: Assignment
📝 S08: MockServer
📝 S09: API Gateway / Service Integration




~




📣 S03: Docker Crash Course
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To start working with Docker, the first step is to install it
Then make sure the docker-daemon is running properly
~
[terminal]
$ docker version
$ docker-compose version
...
🧐🕵️🔎 If docker-daemon is NOT running `docker version` command will say it was NOT able to connect to Docker Server
¬
Docker Desktop 4.41.2
Docker Client 28.1.1
Docker Compose version v2.35.1-desktop.1
=======================================================================================================================================


🚀 Docker Installation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================
🔎 Docker Installation
⚓ https://docs.docker.com/get-docker
Make sure your machine meets the System Requirements

[Windows] > Settings > System > Information  => 🔎 System Type




~





🚀 Docker Verification
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Docker Desktop 4.41.2 

$ docker version
🧐🕵️🔎 If docker-daemon is NOT running `docker version` command will say it was NOT able to connect to Docker Server
~
$ docker-compose version
Docker Compose version v2.35.1-desktop.1
=======================================================================================================================================
🧐🕵️🔎 To confirm Docker is working properly...
 -> We need to make sure our docker-daemon is running

Linux|MAC***
[terminal]
$ sudo service docker status
$ sudo service docker start


Windows***
Validate `Docker Desktop` is running

...

[terminal]
$ docker
$ docker version
$ docker version
Client:
 Version:           28.1.1
 API version:       1.49
 Go version:        go1.23.8
 Git commit:        4eba377
 Built:             Fri Apr 18 09:53:24 2025
 OS/Arch:           windows/amd64
 Context:           desktop-linux

Server: Docker Desktop 4.41.2 (191736)
 Engine:
  Version:          28.1.1
  API version:      1.49 (minimum version 1.24)
  Go version:       go1.23.8
  Git commit:       01f442b
  Built:            Fri Apr 18 09:52:57 2025
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.7.27
  GitCommit:        05044ec0a9a75232cad458027ca83437aae3f4da
 runc:
  Version:          1.2.5
  GitCommit:        v1.2.5-0-g59923ef
 docker-init:
  Version:          0.19.0
  GitCommit:        de40ad0
~
🧐🕵️🔎 If docker-daemon is NOT running `docker version` command will say it was NOT able to connect to Docker Server
$ docker version
Client:
 Version:           28.1.1
 API version:       1.49
 Go version:        go1.23.8
 Git commit:        4eba377
 Built:             Fri Apr 18 09:53:24 2025
 OS/Arch:           windows/amd64
 Context:           desktop-linux
❌ error during connect: Get "http://%2F%2F.%2Fpipe%2FdockerDesktopLinuxEngine/v1.49/version": open //./pipe/dockerDesktopLinuxEngine: The system cannot find the file specified.


$ docker-compose version
Docker Compose version v2.35.1-desktop.1


📝 How to start/stop docker-daemon❓
[Windows]
The easiest way is to start it through the Docker Desktop application
Even though there is a Powershell command line  ´Get-Process "Docker Desktop" | Stop-Process´
⚠️ In case of failure stop the related tasks via ´Task Manager´

[Linux]
$ sudo systemctl start docker
$ sudo systemctl stop docker







~






🚀 Docker Terminology
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A docker image is like a class in Java terminology
When we run a docker image we're creating a container. (This is like an Object instance)
...
To define an image we must create a Dockerfile
Additionally there is a bunch of pre-defined images we can pull from Docker Registry
To download an existing image we can issue the command  `docker pull {image-name}`
To execute the docker image, we must run it. This will create a `docker container`
$ docker run hello-world
=======================================================================================================================================


Term              Description                                            Java Analogy
===========================================================================================================
Dockerfile         Human readable instructions for creating the image     .java (Human Readable Java Code)
(no extensions)    (dependencies  + Run time)                              
-----------------------------------------------------------------------------------------------------------
Build              Creates a Snapshot from Dockerfile                     build / compile
-----------------------------------------------------------------------------------------------------------
Image              Lightweight VM (Snapshot)                              .class / .jar / .war
-----------------------------------------------------------------------------------------------------------
Tag                Image version                                          jar version
-----------------------------------------------------------------------------------------------------------
Container          Instance of image /                                    Instances / Objects
                   Running lightweight VM /                               Person p1 = new Person();
                   We can create multiple containers from an image        Person p2 = new Person(); 
-----------------------------------------------------------------------------------------------------------
DockerHub          Image Repository                                       Maven Repository
===========================================================================================================





~





🚀 Docker System Prune
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================
When browing your browser will keep the Browsing History. However you can clear that information
 -> That´s exactly what 'docker system prune' is used for.

[terminal]
$ docker system prune -af
$ docker system prune -f
~
`docker system prune` command is used to clean up unused Docker resources in the docker system
-f stands for force, 
-af will includes all unused images including networks and tags


[terminal]
$ docker system prune -af
Total reclaimed space: 0B


~





🚀 Docker Commands
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
$ docker images
$ docker pull hello-world
$ docker run hello-world
$ docker rmi hello-world

🧐🕵️🔎 Notice that when we execute the 'docker run {image-name}' command
 -> docker-daemon will first look for the {image-name} locally
 -> If it's NOT present then it will pull it from docker registry
...
🧐🕵️🔎 'docker pull' is useful when trying to work with an specific tag  (e.g. latest)
 -> It allow us to download the latest version by default
 => Useful in case there is an updated version of that image
=======================================================================================================================================

Command                  |  Description  
=============================================================================================
docker images               To show the list of images you have in your machine
---------------------------------------------------------------------------------------------
docker run {image-name}     To create a container of the image (e.g. Person p1 = new Person;)
---------------------------------------------------------------------------------------------
docker pull {image-name}    To pull the image from DockerHub
=============================================================================================


[terminal]
$ docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

$ docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
e6590344b1a5: Pull complete
Digest: sha256:940c619fbd418f9b2b1b63e25d8861f9cc1b46e3fc8b018ccfe8b78f19b8cc4f
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

$ docker run hello-world
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
~
🧐🕵️🔎 Notice that when we execute the 'docker run {image-name}' command
 -> docker-daemon will first look for the {image-name} locally
 -> If it's NOT present then it will pull it from docker registry


$ docker images
REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
hello-world   latest    940c619fbd41   5 months ago   20.4kB

$ docker system prune -af
Deleted Images:
untagged: hello-world:latest
deleted: sha256:940c619fbd418f9b2b1b63e25d8861f9cc1b46e3fc8b018ccfe8b78f19b8cc4f
deleted: sha256:03b62250a3cb1abd125271d393fc08bf0cc713391eda6b57c02d1ef85efcc25c
deleted: sha256:74cc54e27dc41bb10dc4b2226072d469509f2f22f1a3ce74f4a59661a1d44602
deleted: sha256:e6590344b1a5dc518829d6ea1524fc12f8bcd14ee9a02aa6ad8360cce3a9a9e9

Total reclaimed space: 16.36kB

$ docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

~

$ docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
e6590344b1a5: Pull complete
Digest: sha256:940c619fbd418f9b2b1b63e25d8861f9cc1b46e3fc8b018ccfe8b78f19b8cc4f
Status: Downloaded newer image for hello-world:latest
docker.io/library/hello-world:latest

$ docker images
REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
hello-world   latest    940c619fbd41   5 months ago   20.4kB

If 'docker run' command performs a pulling in case the image is no present locally
Is ok if we always jus execute 'docker run'❓
 -> Well, it depends...
🧐🕵️🔎 'docker pull' is useful when trying to work with an specific tag  (e.g. latest)
 -> It allow us to download the latest version by default
 => Useful in case there is an updated version of that image





~





🚀 Creating Ubuntu Container
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
$ docker pull ubuntu
$ docker run ubuntu
=======================================================================================================================================

[terminal]
$ docker pull ubuntu
$ docker run ubuntu
$ docker run ubuntu
$ docker run ubuntu
~
🧐🕵️🔎 Notice that when running 'docker run ubuntu' it exits immediately
Why is that❓ Because there is NO instruction on the image itself to do something else


✏️ Docker Commands
-----
Command                               Description
===================================|========================================================
docker run {image-name} [command]     To pass the command to be executed inside the container
                                      (it depends on the image.)

$ docker run ubuntu date
Tue Jun 24 03:21:27 UTC 2025

$ docker run ubuntu ls
bin
boot
dev
etc
home
lib
lib64
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var

...

🧐🕵️🔎 'docker ps' by default shows the running containers
🧐🕵️🔎 'docker ps -a' shows all the containers
...
$ docker ps
$ docker ps -a 


$ docker ps -a
CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS                      PORTS     NAMES
d206077257c2   hello-world   "/hello"      9 seconds ago    Exited (0) 8 seconds ago              keen_booth
19e26e711fcd   ubuntu        "/bin/bash"   27 seconds ago   Exited (0) 26 seconds ago             great_greider
ec9aff9b80ec   ubuntu        "/bin/bash"   31 seconds ago   Exited (0) 30 seconds ago             compassionate_shockley
e25c1a6b93b0   ubuntu        "/bin/bash"   37 seconds ago   Exited (0) 35 seconds ago             trusting_shtern




~





🚀 Interactive Mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

✏️ Docker Run Options - docker run [option] {image-name}
-----
Command                                 Description
=====================================|============================================
docker run -it ubuntu                     To start container interactive mode
                                            ● -i → std-input
                                            ● -t → std-output / attach terminal
----------------------------------------------------------------------------------
docker run –name=[some-name] ubuntu       To assign a name for your container
=====================================|============================================

[terminal]
$ docker run --help
-i, --interactive   Keep STDIN open even if not attached
-t, --tty           Allocate a pseudo-TTY


$ docker run -it ubuntu
root@20e9821c3f75:/# date
Tue Jun 24 12:05:07 UTC 2025
root@20e9821c3f75:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@20e9821c3f75:/# mkdir ediaz
root@20e9821c3f75:/# ls
bin  boot  dev  💥ediaz💥  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@20e9821c3f75:/# cd ediaz/
root@20e9821c3f75:/ediaz# pwd
/ediaz
root@20e9821c3f75:/ediaz# ls
root@20e9821c3f75:/ediaz# echo "docker is awesome" > dummy.txt
root@20e9821c3f75:/ediaz# ls
dummy.txt
root@20e9821c3f75:/ediaz# cat dummy.txt
docker is awesome
root@20e9821c3f75:/ediaz# exit
exit

...
$ docker run -it ubuntu
root@20e9821c3f75:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
~
🧐🕵️🔎 Notice if we start execute docker run command again..
 -> It wil start a new instance of the image and previous content we've defined will be lost




~





🚀 Docker Start Command
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
🧨⚠️🤯 If you want to run an existing container, use the command docker start {container-id}
 -> Be aware of the 'docker start' options 
...
🧐🕵️🔎 If you want to start an existing container in interactive mode the options are -ia
$ docker start -ia {container-id}
=======================================================================================================================================

[terminal]
$ docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES
38b036eafadc   ubuntu    "/bin/bash"   6 seconds ago    Exited (0) 5 seconds ago              compassionate_bartik
820f505049e5   ubuntu    "/bin/bash"   19 minutes ago   Exited (0) 19 seconds ago             serene_euler
~
🧐🕵️🔎 Notice docker-daemon assigns a random name to our containers
 -> If you want to provide your custom name, you must provide the flag --name={custom_name}
$ docker run -it --name=c1 ubuntu
root@7cdc72226bb4:/# exit
exit

$ docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES
7cdc72226bb4   ubuntu    "/bin/bash"   9 seconds ago    Exited (0) 3 seconds ago             c1
38b036eafadc   ubuntu    "/bin/bash"   3 minutes ago    Exited (0) 3 minutes ago             compassionate_bartik
820f505049e5   ubuntu    "/bin/bash"   22 minutes ago   Exited (0) 3 minutes ago             serene_euler

~

🧨⚠️🤯 If you want to run an existing container, use the command docker start {container-id}
 -> Be aware of the 'docker start' options 
🧐🕵️🔎 If you want to start an existing container in interactive mode the options are -ia
$ docker start --help
. . .
Options:
  -a, --attach               Attach STDOUT/STDERR and forward signals
      --detach-keys string   Override the key sequence for detaching a
                             container
  -i, --interactive          Attach container's STDIN

~

$ docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES
7cdc72226bb4   ubuntu    "/bin/bash"   9 seconds ago    Exited (0) 3 seconds ago             c1
38b036eafadc   ubuntu    "/bin/bash"   3 minutes ago    Exited (0) 3 minutes ago             compassionate_bartik
820f505049e5   ubuntu    "/bin/bash"   22 minutes ago   Exited (0) 3 minutes ago             serene_euler

$ docker start -ia serene_euler
root@820f505049e5:/# ls
bin  boot  dev  ediaz  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@820f505049e5:/# cd ediaz
root@820f505049e5:/ediaz# ls
dummy.txt
root@820f505049e5:/ediaz# cat dummy.txt
docker is awesome
root@820f505049e5:/ediaz# exit
exit




~





🚀 Docker Stop / Kill Command
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

[terminal]
$ docker run -it --name=c1 ubuntu
❌ docker: Error response from daemon: Conflict. 
The container name "/c1" is already in use by container "3ddb4090ae5030a836da6eeb8c926704c4c445bb769d26af0d808cada5385688".
You have to remove (or rename) that container to be able to reuse that name.

Run 'docker run --help' for more information

$ docker start -ia c1

[terminal2]
$ docker stop c1

[terminal2]
$ docker kill c1





~





🚀 Docker Exec Command
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

✏️ Docker Exec
-----
Command                                     Description  
========================================|==============================================================
docker exec [container-name] [command]      To start a command on a running container
                                                ● run → creates new container & executes the command
                                                ● exec → does the similar thing on a running container

docker exec allow us to execute a command in an existing container
Whereas docker run creates a new instance, exec will issue the command to a running container
🧨⚠️🤯 (Docker container must be up and running)
 -> Notice this is like if We open an additional command entry point for the running container

$ docker exec --help
$ docker exec -it {image-name}      ❌ 
$ docker exec -it c1
docker: 'docker exec' requires at least 2 arguments
Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

$ docker exec -it {image-name} bash ✅





~





🚀 Docker - Image Name Format
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

[registry:port]  / [username] / image-name  [:tag]
        |               |                      |____> latest
        |               |           
        |               |___________________________> library
        |
        |___________________________________________> docker.io

🧐🕵️🔎 Notice when we pull an image from docker registry, there are a few optional fields
 -> Docker provides a default account called library where it hosts the predefined images
 -> You can also create your own account and upload your own images

[terminal]
$ docker system prune -af
Deleted Containers:
3ddb4090ae5030a836da6eeb8c926704c4c445bb769d26af0d808cada5385688

Deleted Images:
untagged: ubuntu:latest
deleted: sha256:b59d21599a2b151e23eea5f6602f4af4d7d31c4e236d22bf0b62b86d2e386b8f
deleted: sha256:04f510bf1f2528604dc2ff46b517dbdbb85c262d62eacc4aa4d3629783036096
deleted: sha256:bf16bdcff9c96b76a6d417bd8f0a3abe0e55c0ed9bdb3549e906834e2592fd5f
deleted: sha256:d9d352c11bbd3880007953ed6eec1cbace76898828f3434984a0ca60672fdf5a

Total reclaimed space: 29.74MB

$ docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
e6590344b1a5: Pull complete
Digest: sha256:940c619fbd418f9b2b1b63e25d8861f9cc1b46e3fc8b018ccfe8b78f19b8cc4f
Status: Downloaded newer image for hello-world:latest
docker.io/library/hello-world:latest

~

🧨⚠️🤯 Docker daemon will look for images in the public registry first 'docker.io/library/{image-name}'
 -> Then it will look in other public accounts
🧐🕵️🔎 If you try to pull a private image you have to login first

[browser]
⚓ https://hub.docker.com
🔎 hello-world

🧐🕵️🔎 'latest' tag is NOT by timestamp
 -> It's just a tag, you can also thing of it as 'default' tag
 -> It's developer responsibility to have that image and its tag 'latest' updated





~





🚀 NGINX Container
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What image would be selected when I issue the command 'docker run nginx' having two nginx images❓
 -> By default the tag is 'latest', so there should NOT be confussion on that
 => If you want to run an specific image, aswell as on the pulling 
    ..you must specify the required tag, otherwise it will select the 'latest' tag
...
How can I access the nginx home page❓
🧐🕵️🔎 Notice the PORTS exposed by the nginx container is 80/tcp
 -> However, if I try to access ⚓ https://localhost:80, I'll get a timeout ❌
🧐🕵️🔎 Right now the only way to access is by executing:
 -> $ docker exec -it {container_id_or_name}
 -> curl localhost:80
🧨⚠️🤯 This is because a Port Mapping is required from your localhost ports to the Docker Container
~
$ docker run {-p {host-port:container-port}] {image-name}
$ docker run -p 80:80 nginx
...
🧐🕵️🔎 If you want to check which ports are your containers mapped to, run the command  ´docker ps´
$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES
b9e9026ba5ac   nginx     "/docker-entrypoint.…"   4 minutes ago   Up 4 minutes   0.0.0.0:8080->80/tcp   dazzling_tesla
=======================================================================================================================================
Now, let's pull nginx:latest and nginx:perl images

[terminal]
$ docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
Digest: sha256:6784fb0834aa7dbbe12e3d7471e69c290df3e6ba810dc38b34ae33d3c1c05f7d
Status: Image is up to date for nginx:latest
docker.io/library/nginx:latest

$ docker pull nginx:perl
perl: Pulling from library/nginx
3dcb4a032cdb: Pull complete
Digest: sha256:830c1f6705d12f5691ce24bf93540101bd90f813d0623b561f08a98afc6b9b8d
Status: Downloaded newer image for nginx:perl
docker.io/library/nginx:perl

As you can see we have two nginx images
$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
nginx        perl      830c1f6705d1   2 months ago   345MB
nginx        latest    6784fb0834aa   2 months ago   279MB

What image would it select when I issue the command 'docker run nginx'❓
 -> By default the tag is 'latest', so there should NOT be confussion on that
 => If you want to run an specific image, aswell as on the pulling 
    ..you must specify the required tag, otherwise it will select the 'latest' tag


~

[terminal]
$ docker run nginx
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2025/06/24 23:26:17 [notice] 1#1: using the "epoll" event method
2025/06/24 23:26:17 [notice] 1#1: nginx/1.27.5
2025/06/24 23:26:17 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)
2025/06/24 23:26:17 [notice] 1#1: OS: Linux 6.6.87.1-microsoft-standard-WSL2
2025/06/24 23:26:17 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2025/06/24 23:26:17 [notice] 1#1: start worker processes


🧐🕵️🔎 Notice nginx container behaves as a service so it will keep running until gets stopped
 -> Ubuntu image is an OS so it just waits for some command, executes it and then exits
 -> Hello-World image just prints the message and exits

How can I access the nginx home page❓
$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES
dc0655c493d8   nginx     "/docker-entrypoint.…"   7 minutes ago   Up 7 minutes   80/tcp    flamboyant_mendeleev

🧐🕵️🔎 Notice the PORTS exposed by the nginx container is 80/tcp
 -> However, if I try to access ⚓ https://localhost:80, I'll get a Connection Refused ❌
...
🧐🕵️🔎 Right now the only way to access is by executing:
 -> $ docker exec -it {container_id_or_name}
 -> curl localhost:80
...
🧨⚠️🤯 This is because a Port Mapping is required from your localhost ports to the Docker Container


$ docker exec -it dc06 bash
root@dc0655c493d8:/# curl localhost
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
root@dc0655c493d8:/#



🧨⚠️🤯 Notice, you cannot specify port mappings with docker start.
 -> docker start is used to restart an existing stopped container.
 -> Port Mapping (like -p 8080:80) is only defined when the container is created using docker run or docker create.


[terminal]
$ docker run -p 80:80 nginx


[browser]
⚓ http://localhost
~
Welcome to nginx!
If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.



🧐🕵️🔎 If you want to check which ports are your containers mapped to, run the command  ´docker ps´
$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES
b9e9026ba5ac   nginx     "/docker-entrypoint.…"   4 minutes ago   Up 4 minutes   0.0.0.0:8080->80/tcp   dazzling_tesla





~





🚀 Docker - Detached mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
🧐🕵️🔎 In order to run a container in detached mode (background)
 -> We must include the -d option
=======================================================================================================================================

[terminal]
$ docker system prune -af
Deleted Containers:
5d38acc33c2b373b540da471414cc140b15c3696de7e8d9f6fdaf861692e8b16
7c9977a624f8850fd3dcfc42525ad0cfc965705974bd14a69d4ef7108a7420d9

Total reclaimed space: 155.6kB

$ docker run -p 80:80 nginx
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2025/06/25 00:54:09 [notice] 1#1: using the "epoll" event method
2025/06/25 00:54:09 [notice] 1#1: nginx/1.29.0
2025/06/25 00:54:09 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14+deb12u1)
2025/06/25 00:54:09 [notice] 1#1: OS: Linux 6.6.87.1-microsoft-standard-WSL2
2025/06/25 00:54:09 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2025/06/25 00:54:09 [notice] 1#1: start worker processes
Ctrl^C

$ docker run -d -p 80:80 nginx 





~





🚀 Docker - Accessing logs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

[terminal]
$ docker logs {container_id_or_name}





~





🚀 Volume Mapping - Theory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

Volume Mapping allow us to maintain the state of our containers...
It´s another docker run option provided by docker to bind your host directly to a specific directory
 -> This allow us to exchange files between the host and container and viceversa.

 🧐🕵️🔎 Docker supports  -v|--volume  / --mount for volume mapping
  -> Docker suggest to use --mount for new developments
  => Using --mount provides you more options but requires you to be more explicit --type={bind|tmpf}


✏️ Docker Volume Mapping
----------
Command                                           Description
========================================================================================================
docker run -v /host-path:/container-path image       To map specific directory to a container directory. 
                                                     (use absolute paths)
--------------------------------------------------------------------------------------------------------
docker run                                           To map multiple host paths to container paths
    -v /Users/vins/temp1:/a/b/c
    -v /Users/vins/temp2:/a/b/d
    [image-name]
--------------------------------------------------------------------------------------------------------
[Windows Users]
docker run -v d:/vins/temp:/a/b/c/d image
--------------------------------------------------------------------------------------------------------
docker run                                           To share file system in read-only mode
    -v /host-path:/container-path:ro 
    [image-name] 
--------------------------------------------------------------------------------------------------------
docker run                                           To share a single file
    -v /host-path/some.txt:/container-path/some.txt 
    [image-name] 
========================================================================================================





~





🚀 Volume Mapping - Demo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

🧨⚠️🤯 Using the command $PWD on WINDOWS might NOT work as expected. 
 -> Please use POWERSHELL and run command bellow
[POWERSHELL] docker run -it -v "${PWD}:/a/b/c" ubuntu

...

[POWERSHELL]
$ docker run -it -v "${PWD}:/a/b/c" ubuntu
$ mkdir test
$ cd test
$ echo "Hello host" > demo.txt

[HOST]
[✏️#~/...demo.txt]
Hello host
Hi container! How are you?





~





🚀 Volume Mapping - Nginx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

🔎 https://hub.docker.com/_/nginx
 -> /usr/share/nginx/html

[terminal]
$ docker run -d --name=c1 nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx

$ docker exec -it c1 bash
root@88a40fe9bb72:/# ls
bin   dev                  docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var
boot  docker-entrypoint.d  etc                   lib   media  opt  root  sbin  sys  usr
root@88a40fe9bb72:/# cd /usr/share/nginx/html
root@88a40fe9bb72:/usr/share/nginx/html# ls
50x.html  index.html
root@88a40fe9bb72:/usr/share/nginx/html# cat index.html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
root@88a40fe9bb72:/usr/share/nginx/html# exit
exit

$ docker kill c1

~

[✏️#~/.../{WORKSPACE}/index.html]
<h1>This is index.html coming from your host!!</h1>

[POWERSHELL]
$ docker run -p 80:80 -v "${PWD}:/usr/share/nginx/html" nginx





~





🚀 Volume Mapping - Single File
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================================================================================

🧐🕵️🔎 To share a single file use...

[POWERSHELL]
$ docker run -it -v "${PWD}/index.html:/a/b/c/index.html" ubuntu
